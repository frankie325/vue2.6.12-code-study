/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
/*
当子节点数组中包含组件时，因为函数式组件可能会返回一个数组，对于这种情况只需要简单的标准化
因为函数式组件已经标准化了它的子节点，所以只会有一层深度的数组嵌套
利用 Array.prototype.concat.apply([], children)将数组扁平化
*/ 
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
/*
  children属性可能是嵌套的数组形式
*/
export function normalizeChildren (children: any): ?Array<VNode> {
  return isPrimitive(children) //如果是原始类型
    ? [createTextVNode(children)] //创建文字VNode，用数组包裹
    : Array.isArray(children) //如果是数组
      ? normalizeArrayChildren(children) //调用normalizeArrayChildren
      : undefined
}

// 判断是不是文本节点
function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

/*
  h("div",{},["text",["text", h("span","span1")], h("span","span2")])
  渲染函数中children参数是可以不断嵌套数组的
  normalizeArrayChildren就是将嵌套的数组扁平化，并将相邻的文本节点进行合并
*/ 
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    // 遍历子节点
    c = children[i]
    // 如果没定义或者是布尔值，跳出当次循环
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    //获取res 最后一个数据，即上一个推入到res中的节点
    last = res[lastIndex]
    //  nested
    if (Array.isArray(c)) {// 如果是数组，说明children有嵌套数组
      if (c.length > 0) {
        // 递归调用normalizeArrayChildren
        // 如果数组嵌套多次，nestedIndex为_0_1_2，数字代表每层数组所在的索引
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          // 如果数组内第一个节点与上一个节点都是文本节点，则进行合并
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          // 从数组内删除掉该文本几点，已经合并了
          c.shift()
        }
        // 调用apply展开该数组，推入到res中
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) {// 如果是原始类型，比如字符、数字之类的
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        // 如果res最后一个节点是文本节点，则将两个文本进行合并
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        // res最后一个节点不是文本节点，则将当前节点推入res
        res.push(createTextVNode(c))
      }
    } else {
      // 如果走到这，说明是普通标签的VNode节点

      if (isTextNode(c) && isTextNode(last)) {//如果是文本VNode节点
        // merge adjacent text nodes
        // 合并文本节点
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && //说明正在遍历的是v-for产生的VNode数组中的节点
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
            // 为该节点添加默认的key值 __vlist_0_1__
            // 为什么要这么做？可能是因为用户传入render函数时，如果使用了_l工具函数去生成节点，但是没给节点传key属性
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
